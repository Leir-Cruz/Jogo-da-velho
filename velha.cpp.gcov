        -:    0:Source:velha.cpp
        -:    0:Graph:velha.gcno
        -:    0:Data:velha.gcda
        -:    0:Runs:4
        -:    0:Source is newer than graph
        -:    1:/**
        -:    2: * \file  velha.cpp
        -:    3: * Copyright 2021 Gabriel Cruz
        -:    4: */
        -:    5:
        -:    6:
        -:    7:#include "velha.hpp"
        -:    8:
        -:    9:/** 
        -:   10: * @brief verifica situacao do jogo da velha  
        -:   11: * @author Programador 
        -:   12: * @param  velha descreve o parametro
        -:   13: * 
        -:   14: *  Descrever o que a funcao faz
        -:   15: */ 
       27:   16:int VerificaColuna(int matriz[3][3]) {
       96:   17:    for ( int j = 0; j < 3; j++ ) {
       77:   18:        if ( matriz[0][j] != 0 ) {
       39:   19:            if (matriz[0][j] == matriz[1][j] && matriz[1][j] == matriz[2][j]) {
        8:   20:                return matriz[0][j];
        -:   21:            }
        -:   22:        }
        -:   23:    }
       19:   24:    return false;
        -:   25:}
        -:   26:
       19:   27:int VerificaLinha(int matriz[3][3]) {
       70:   28:    for ( int i = 0; i < 3; i++ ) {
       54:   29:        if ( matriz[i][0] != 0 ) {
       25:   30:            if (matriz[i][0] == matriz[i][1] && matriz[i][1] == matriz[i][2]) {
        3:   31:                return matriz[i][0];
        -:   32:            }
        -:   33:        }
        -:   34:    }
       16:   35:    return false;
        -:   36:}
        -:   37:
       37:   38:int VerificaDiagonal(int matriz[3][3]) {
       37:   39:    if ( matriz[1][1] != 0 ) {
       20:   40:        if ( matriz[0][0] == matriz[1][1] && matriz[1][1] == matriz[2][2] ) {
        4:   41:            return matriz[1][1];
        -:   42:        }
       16:   43:        if (matriz[2][0] == matriz[1][1] && matriz[1][1] == matriz[2][0]) {
        6:   44:            return matriz[1][1];
        -:   45:        }
        -:   46:    }
       27:   47:    return 0;
        -:   48:}
        -:   49:
       52:   50:int VerificaNumeros(int matriz[3][3]) {
       52:   51:    int zeros = 0;
       52:   52:    int numX = 0;
       52:   53:    int numO = 0;
      208:   54:    for ( int i = 0; i < 3; i++ ) {
      624:   55:        for ( int j = 0; j < 3; j++ ) {
      468:   56:            if (matriz[i][j] == 1) {
      184:   57:                numX++;
      284:   58:            } else if (matriz[i][j] == 2) {
      130:   59:                numO++;
        -:   60:            } else {
      154:   61:                zeros++;
        -:   62:            }
        -:   63:        }
        -:   64:    }
       52:   65:    if (numO > numX + 1 || numX > numO + 1) {
       15:   66:        return -2;
       37:   67:    } else if (zeros > 0) {
       31:   68:        return -1;
        -:   69:    }
        6:   70:    return 0;
        -:   71:}
        -:   72:
       52:   73:int VerificaVelha(int velha[3][3]) {
       52:   74:    int indefinido = VerificaNumeros(velha);
       52:   75:    if ( indefinido < -1 ) {
       15:   76:        return indefinido;
        -:   77:    }
       37:   78:    int ganhadorDiagonal = VerificaDiagonal(velha);
       37:   79:    if ( ganhadorDiagonal != 0 ) {
       10:   80:        return ganhadorDiagonal;
        -:   81:    }
       27:   82:    int ganhadorColuna = VerificaColuna(velha);
       27:   83:    if ( ganhadorColuna != 0 ) {
        8:   84:        return ganhadorColuna;
        -:   85:    }
       19:   86:    int ganhadorLinha = VerificaLinha(velha);
       19:   87:    if ( ganhadorLinha != 0 ) {
        3:   88:       return ganhadorLinha;
        -:   89:    }
       16:   90:    return indefinido;
        -:   91:}
